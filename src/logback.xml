<?xml version="1.0" encoding="UTF-8"?>
<!--
	scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 
	scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 
	debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="false">

	<property name="LOG_DIR" value="./log" />
	<property name="APP_NAME" value="log" />
	<property name="PATTERN" value="%d{yyyy-MM-dd HH:mm:ss} %level %c:%line - %msg%n" />
	
	<!--
		上下文名称：<contextName>, 每个logger都关联到logger上下文， 默认上下文名称为“default”。
		但可以使用<contextName>设置成其他名字，用于区分不同应用程序的记录。 一旦设置，不能修改。
	-->
	<contextName>${APP_NAME}</contextName>

	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<Pattern>${PATTERN}</Pattern>
		</encoder>
	</appender>

	<appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_DIR}/${APP_NAME}.log</file>
		<!-- 当发生滚动时的行为 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
			<!--
				必须包含“%i”例如，假设最小值和最大值分别为1和2，命名模式为 mylog%i.log,会产生归档文件mylog1.log和mylog2.log。
				还可以指定文件压缩选项，例如，mylog%i.log.gz 或者 没有log%i.log.zip
			-->
			<FileNamePattern>${LOG_DIR}/${APP_NAME}.%i.log</FileNamePattern>
			<!-- 窗口索引最小值 -->
			<minIndex>1</minIndex>
			<!-- 窗口索引最大值 -->
			<maxIndex>1000</maxIndex>
		</rollingPolicy>

		<!-- 激活滚动的条件。 -->
		<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
			<!-- 活动文件的大小，默认值是10MB -->
			<maxFileSize>50MB</maxFileSize>
		</triggeringPolicy>

		<!-- 对记录事件进行格式化。 -->
		<encoder>
			<charset>UTF-8</charset>
			<Pattern>${PATTERN}</Pattern>
		</encoder>
	</appender>

	<!--
		特殊的<logger>元素，是根logger。只有一个level属性，应为已经被命名为"root".
		level:设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。默认是DEBUG。
		<root>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个loger。
	-->
	<root>
		<level value="ERROR" />
		<appender-ref ref="STDOUT" />
		<appender-ref ref="FILE" />
	</root>

	<!--
		用来设置某一个 包 或者具体的某一个 类 的日志打印级别、以及指定<appender>
		name:用来指定受此logger约束的某一个包或者具体的某一个类。 
		level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前loger将会继承上级的级别。 
		additivity:是否向上级logger传递打印信息。默认是true。(这个logger的上级就是上面的root)
		<logger>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger。
	-->
	<logger name="com.ccc" level="INFO" additivity="true" />
	
</configuration>